name_length <- length(data_names)
result <- numeric(name_length)
for (i in 1:name_length) {
result[i] <- sum(y %in% factor(unlist(data[data_names[i]])))
}
ncol_y <- which(result == y_length)
y_group <- data_names[ncol_y]
#re-arrange the whole dataset
data1<-data[,-ncol_y]
data2<-cbind(data[,ncol_y],data1)
data2<-as.data.frame(data2)
#do the logistic regression and get the coefficient/p-value/standard error
coe <- numeric(ncol(data2)-1)
pva<-numeric(ncol(data2)-1)
se <-numeric(ncol(data2)-1)
for(i in 2:ncol(data2)){
se[i]<-summary(glm(data2[,1]~data2[,i],family=binomial))$coefficients[2,2]
coe[i]<-summary(glm(data2[,1]~data2[,i],family=binomial))$coefficients[2,1]
pva[i]<-summary(glm(data2[,1]~data2[,i],family=binomial))$coefficients[2,4]
}
se <-se[-1]
coe <-coe[-1]
pva <-pva[-1]
#calculate the coffience interval and the or
ci1 <- numeric(length(se))
ci2 <-numeric(length(se))
for(i in 1:length(se)){
ci1[i]<- coe[i]-1.96*se[i]
ci2[i]<- coe[i]+1.96*se[i]
}
or<-exp(cbind(OR=coe, ci1,ci2))
#change the form of the data
test<-function(q){
if(q<0.001) q.txt<-"<0.001"
else if(q<0.05) q.txt<-"<0.05"
else q.txt <-format(q,digits = digit)
}
#change the form of p-value
pvalue <- numeric(nrow(or))
for(i in 1:nrow(or)){
pvalue[i]<-test(pva[i])
}
#add the name of rows
data_names <- colnames(data2)
names<-data_names[-1]
out <- data.frame(Parameters=names,
Coefficient = format(coe,digits = digit),
p.value = pvalue,
OR = format(or[,1],digits = digit),
CI= paste0("(",
format(or[,2],digits = digit),
",",
format(or[,3],digits = digit),
")"))
names(out)[5] <- "CI(95%)"
out
}else{
#linear
#get the name and the number of the Y
y_length <- length(y)
data_names <- colnames(data)
name_length <- length(data_names)
result <- numeric(name_length)
for (i in 1:name_length) {
result[i] <- sum(y %in% factor(unlist(data[data_names[i]])))
}
ncol_y <- which(result == y_length)
y_group <- data_names[ncol_y]
#re-arrange the whole dataset
data1<-data[,-ncol_y]
data2<-cbind(data[,ncol_y],data1)
data2<-as.data.frame(data2)
#do the logistic regression and get the coefficient/p-value/standard error
coe1 <- numeric(ncol(data2)-1)
pva1<-numeric(ncol(data2)-1)
se1 <-numeric(ncol(data2)-1)
for(i in 2:ncol(data2)){
se1[i]<-summary(lm(data2[,1]~data2[,i]))$coefficients[2,2]
coe1[i]<-summary(lm(data2[,1]~data2[,i]))$coefficients[2,1]
pva1[i]<-summary(lm(data2[,1]~data2[,i]))$coefficients[2,4]
}
se1 <-se1[-1]
coe1 <-coe1[-1]
pva1 <-pva1[-1]
#calculate the coffience interval and the or
ci21 <- numeric(length(se1))
ci22 <-numeric(length(se1))
for(i in 1:length(se1)){
ci21[i]<- coe1[i]-1.96*se1[i]
ci22[i]<- coe1[i]+1.96*se1[i]
}
#change the form of the data
test<-function(q){
if(q<0.001) q.txt<-"<0.001"
else if(q<0.05) q.txt<-"<0.05"
else q.txt <-format(q,digits = digit)
}
#change the form of p-value
pvalue1 <- numeric(length(pva1))
for(i in 1:length(pva1)){
pvalue1[i]<-test(pva1[i])
}
#add the name of rows
data_names <- colnames(data2)
names<-data_names[-1]
out1 <- data.frame(Parameters=names,
Coefficient = format(coe1,digits = digit),
p.value = pvalue1,
CI= paste0("(",
format(ci21,digits = digit),
",",
format(ci22,digits = digit),
")"))
names(out1)[4] <- "CI(95%)"
out1
}
}else{
#linear
#get the name and the number of the Y
y_length <- length(y)
data_names <- colnames(data)
name_length <- length(data_names)
result <- numeric(name_length)
for (i in 1:name_length) {
result[i] <- sum(y %in% factor(unlist(data[data_names[i]])))
}
ncol_y <- which(result == y_length)
y_group <- data_names[ncol_y]
#re-arrange the whole dataset
data1<-data[,-ncol_y]
data2<-cbind(data[,ncol_y],data1)
data2<-as.data.frame(data2)
#do the logistic regression and get the coefficient/p-value/standard error
coe1 <- numeric(ncol(data2)-1)
pva1<-numeric(ncol(data2)-1)
se1 <-numeric(ncol(data2)-1)
for(i in 2:ncol(data2)){
se1[i]<-summary(lm(data2[,1]~data2[,i]))$coefficients[2,2]
coe1[i]<-summary(lm(data2[,1]~data2[,i]))$coefficients[2,1]
pva1[i]<-summary(lm(data2[,1]~data2[,i]))$coefficients[2,4]
}
se1 <-se1[-1]
coe1 <-coe1[-1]
pva1 <-pva1[-1]
#calculate the coffience interval and the or
ci21 <- numeric(length(se1))
ci22 <-numeric(length(se1))
for(i in 1:length(se1)){
ci21[i]<- coe1[i]-1.96*se1[i]
ci22[i]<- coe1[i]+1.96*se1[i]
}
#change the form of the data
test<-function(q){
if(q<0.001) q.txt<-"<0.001"
else if(q<0.05) q.txt<-"<0.05"
else q.txt <-format(q,digits = digit)
}
#change the form of p-value
pvalue1 <- numeric(length(pva1))
for(i in 1:length(pva1)){
pvalue1[i]<-test(pva1[i])
}
#add the name of rows
data_names <- colnames(data2)
names<-data_names[-1]
out1 <- data.frame(Parameters=names,
Coefficient = format(coe1,digits = digit),
p.value = pvalue1,
CI= paste0("(",
format(ci21,digits = digit),
",",
format(ci22,digits = digit),
")"))
names(out1)[4] <- "CI(95%)"
out1
}
}
#sample data:
data <- NHANES[, c(4, 9, 10, 17, 20, 21, 35, 40)]
data1 <- data[complete.cases(data), ]
dat <- data1
fit1 <- lm(TotChol~., data = dat)
fit2 <- glm(Diabetes~. + TotChol:Education, data = dat, family = binomial())
y<-dat$Diabetes
smruni(y,data=dat,alternative = "logistic")
y<-dat$TotChol
smruni(y,data=dat,alternative = "linear")
smruni(y,data)
library(lng)
library(lng)
?smruni
#sample data:
data <- NHANES[, c(4, 9, 10, 17, 20, 21, 35, 40)]
data1 <- data[complete.cases(data), ]
dat <- data1
fit1 <- lm(TotChol~., data = dat)
fit2 <- glm(Diabetes~. + TotChol:Education, data = dat, family = binomial())
smrmul(fit1,alternative = "linear")
fit2 <- glm(Diabetes~. + TotChol:Education, data = dat, family = binomial())
smrmul(fit2,alternative = "logistic")
#' Multivariate analysis and summary table
#'
#' Generate summary table proving the multivariate analysis for all variabls and dependent variable from the whole dataset
#'
#'
#' @param x   a regression model which generated by users
#' @param alternative	  a character string specifying the alternative approaches, must be one of "linear" (default), "logistic"
#' @param digits     the digits of the data values (default is 3)
#' @param ...	  further arguments to be passed to or from methods
#'
#' @return  For multivariate analysis, it returns a summary table only for significant variavbles based on the type of dependent variables. For continuous Y, the table contains parameters, coefficient, p-value, CI for coefficient; while for categorical variable, the table contains the parameters, Odds ratio, p-value, CI for odds ratio.
#'
#' @references Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) The New S Language. Wadsworth & Brooks/Cole.
#'
#'
#' @examples
#' library(NHANES)
#'
#' data<-data(NHANES)
#'
#' fit1 <- lm(TotChol~., data = data)
#'
#' smrmul(fit1,alternative = "linear")
#'
#' smrmul(fit1)
#'
#' y<-data$Diabetes
#'
#'smruni(y,data=dat,alternative = "logistic")
#'
#'@import tidyverse
#'
#'@export
smrmul<-function(x,
alternative = c("logistic","linear"),
digit = 3,
...){
if(!missing(alternative)){
if(alternative == "logistic"){
b<-summary(x)
#get the p-value, coefficient, CI and odds ratio from the summary
pvalue1<-b$coefficients[,4]
es1<-b$coefficients[,1]
coi1 <- b$coefficients[,1]-1.96*b$coefficients[,2]
coi2 <- b$coefficients[,1]+1.96*b$coefficients[,2]
thre<-exp(cbind(CondOR=b$coefficients[,1], coi1,coi2))
pvalue1<-as.data.frame(pvalue1)
variable1<-rownames(pvalue1)
pvalues1<-cbind(variable1,es1,pvalue1,thre)
rownames(pvalues1)<-NULL
#delete the intercept row
tal<-pvalues1[-1,]
#choose the variables which p.value is smaller than 0.005
del<-which(tal[,3] < 0.05)
tal2<-tal[del,]
#give a function to change the form of p-value
test<-function(x){
if(x<0.001){
x.txt1<-"<0.001"
}else{
x.txt1<-"<0.05"
}
x.txt1
}
#change the form of p-value
res1 <- numeric(nrow(tal2))
for(i in 1:nrow(tal2)){
res1[i]<-test(tal2[i,3])
}
#For loop to change the forme of the CI
coi1 <- numeric(nrow(tal2))
coi2 <- numeric(nrow(tal2))
for(i in 1:nrow(tal2)){
coi1[i]<-format(tal2[i,5],digits = digit)
coi2[i]<-format(tal2[i,6],digits = digit)
}
#for loop to change the form of odds ratio
or1<-numeric(nrow(tal2))
for(i in 1:nrow(tal2)){
or1[i]<-format(tal2[i,4],digits = digit)
}
#for loop to change the forme of coefficient
cof1<-numeric(nrow(tal2))
for(i in 1:nrow(tal2)){
cof1[i]<-format(tal2[i,2],digits = digit)
}
#combine the p-value and the name of variavles and CI
out1 <- data.frame(Parameter = as.character(tal2[,1]),
Coefficient = cof1,
p.value = res1,
OR = or1,
CI= paste0("(",
coi1,
",",
coi2,
")"))
names(out1)[5] <- "CI(95%)"
out1
}else{
a<-summary(x)
ci<-confint(x)
#get the p-value from the summary
pvalue<-a$coefficients[,4]
es<-a$coefficients[,1]
pvalue<-as.data.frame(pvalue)
variable<-rownames(pvalue)
pvalues<-cbind(variable,es,ci,pvalue)
rownames(pvalues)<-NULL
#delete the intercept row
ta<-pvalues[-1,]
#choose the variables which p.value is smaller than 0.005
de<-which(ta[,5] < 0.05)
ta2<-ta[de,]
#give a function to change the form of p-value
test<-function(x){
if(x<0.001){
x.txt1<-"<0.001"
}else{
x.txt1<-"<0.05"
}
x.txt1
}
#change the form of p-value
res <- numeric(nrow(ta2))
for(i in 1:nrow(ta2)){
res[i]<-test(ta2[i,5])
}
#For loop to change the forme of the CI
ci1 <- numeric(nrow(ta2))
ci2 <- numeric(nrow(ta2))
for(i in 1:nrow(ta2)){
ci1[i]<-format(ta2[i,3],digits = digit)
ci2[i]<-format(ta2[i,4],digits = digit)
}
#for loop to change the forme of coefficient
cof<-numeric(nrow(ta2))
for(i in 1:nrow(ta2)){
cof[i]<-format(ta2[i,2],digits = digit)
}
#combine the p-value and the name of variavles and CI
out <- data.frame(Parameter = as.character(ta2[,1]),
Coefficient = cof,
CI= paste0("(",
ci1,
",",
ci2,
")"),
p.value=res)
names(out)[3] <- "CI(95%)"
out
}
}else{
a<-summary(x)
ci<-confint(x)
#get the p-value from the summary
pvalue<-a$coefficients[,4]
es<-a$coefficients[,1]
pvalue<-as.data.frame(pvalue)
variable<-rownames(pvalue)
pvalues<-cbind(variable,es,ci,pvalue)
rownames(pvalues)<-NULL
#delete the intercept row
ta<-pvalues[-1,]
#choose the variables which p.value is smaller than 0.005
de<-which(ta[,5] < 0.05)
ta2<-ta[de,]
#give a function to change the form of p-value
test<-function(x){
if(x<0.001){
x.txt1<-"<0.001"
}else{
x.txt1<-"<0.05"
}
x.txt1
}
#change the form of p-value
res <- numeric(nrow(ta2))
for(i in 1:nrow(ta2)){
res[i]<-test(ta2[i,5])
}
#For loop to change the forme of the CI
ci1 <- numeric(nrow(ta2))
ci2 <- numeric(nrow(ta2))
for(i in 1:nrow(ta2)){
ci1[i]<-format(ta2[i,3],digits = digit)
ci2[i]<-format(ta2[i,4],digits = digit)
}
#for loop to change the forme of coefficient
cof<-numeric(nrow(ta2))
for(i in 1:nrow(ta2)){
cof[i]<-format(ta2[i,2],digits = digit)
}
#combine the p-value and the name of variavles and CI
out <- data.frame(Parameter = as.character(ta2[,1]),
Coefficient = cof,
CI= paste0("(",
ci1,
",",
ci2,
")"),
p.value=res)
names(out)[3] <- "CI(95%)"
out
}
}
smrmul(fit2,alternative = "logistic")
library(lng)
?smrmul
library(lng)
library(lng)
library(lng)
library(lng)
library(lng)
library(lng)
library(lng)
?confounding
library(lng)
library(lng)
library(NHANES)
library(knitr)
#sample data:
data <- NHANES[, c(4, 9, 10, 17, 20, 21, 35, 40)]
data1 <- data[complete.cases(data), ]
dat <- data1
fit1 <- lm(TotChol~., data = dat)
fit2 <- glm(Diabetes~. + TotChol:Education, data = dat, family = binomial())
#y1 <- dat$TotChol
#x1 <- dat$Age
#y2 <- dat$Diabetes
#x2 <- dat$Weight
source("/Users/xinyegui/Documents/OneDrive/文档/Cornell1/Spring 2018/fundament biomedical/finalproject/functions/decrib.R")
library(NHANES)
library(knitr)
#sample data:
data <- NHANES[, c(4, 9, 10, 17, 20, 21, 35, 40)]
data1 <- data[complete.cases(data), ]
dat <- data1
fit1 <- lm(TotChol~., data = dat)
fit2 <- glm(Diabetes~. + TotChol:Education, data = dat, family = binomial())
#y1 <- dat$TotChol
#x1 <- dat$Age
#y2 <- dat$Diabetes
#x2 <- dat$Weight
source("/Users/xinyegui/Documents/OneDrive/文档/Cornell1/Spring 2018/fundament biomedical/finalproject/functions/decrib.R")
decrib(dat)
smruni(dat$TotChol, dat,alternative = "linear")
smruni(dat$Diabetes, dat,alternative = "logistic")
fit1 <- lm(TotChol~., data = dat)
smrmul(fit1,alternative = "linear")
fit1 <- lm(TotChol~., data = dat)
smrmul(fit1)
fit2 <- glm(Diabetes~., data = dat, family = binomial())
smrmul(fit2,alternative = "logistic")
library(lng)
library(lng)
library(lng)
devtools::use_data()
library(readr)
packagesample <- read_csv("~/Downloads/package/lng/data/packagesample.csv")
View(packagesample)
devtools::use_data()
devtools::use_data()
devtools::use_data("packagesample.csv")
devtools::use_data("packagesample")
devtools::use_data("packagesample")
devtools::use_data("packagesample.csv")
save("packagesample.csv")
getwd()
data<-read.csv("packagesample.csv")
devtools::use_data(data)
devtools::use_data(data,samples)
devtools::use_data(data,samples,overwrite = TRUE)
data<-read.csv("packagesample.csv")
devtools::use_data(packagesample)
library(lng)
packagesample
library(lng)
library(NHANES)
?NHANES
load("~/Downloads/package/lng/data/packagesample.rda")
str(packagesample)
?packagesample
library(lng)
?packagesample
packagesample
library(lng)
library(lng)
lng?
?lng
?lng
?decrib
?packagesample
getwd
getwd()
data<-read.csv("packagesample.csv")
use_data(packagesample)
devtools::use_data(data, packagesample, internal = TRUE)
library(lng)
data
devtools::use_data(packagesample, internal = TRUE)
getwd()
devtools::use_data(packagesample, internal = TRUE,overwrite = TRUE)
?packagesample
?lng
`lng-package`
?lng
?packagesample
library(lng)
?packagesample
library(lng)
library(lng)
library(lng)
